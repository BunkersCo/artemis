{% extends "layout.htm" %}

{% block head %}
    {{super()}}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/index.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='datatable/dataTables.bootstrap4.min.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/daterangepicker.css') }}">

    
{% endblock %}

{% block page_content %}
    {{super()}}
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">BGP Updates</h1>
            </div>
        </div>

        <div class="row">

            <div class="col-lg-1 offset-lg-1">
                <p id="display_entries_time"> Select prefix: </p>
            </div>

            <div class="col-lg-2">
                <div class="form-group">
                    <select class="form-control" id="prefixes_selection">
                        <option>All</option>
                        {% for prefix in prefixes %}
                            <option>{{ prefix }}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>

            <div class="col-lg-1 offset-lg-4">
                <p id="display_entries_time"> Timewindow: </p>
            </div>
            <div class="col-lg-3">
                
                <div id="timewindow_buttons">
                    <button type="button" id="select_timewindow_all" class="btn btn-outline-primary">All</button>
                    <button type="button" id="select_timewindow_1h" class="btn btn-outline-secondary">1h</button>
                    <button type="button" id="select_timewindow_24h" class="btn btn-outline-secondary">24h</button>
                    <button type="button" id="select_timewindow_48h" class="btn btn-outline-secondary">48h</button>
                    <button type="button" id="select_timewindow_other" class="btn btn-outline-secondary">Custom</button>
                </div>
                <div id="custom_time">
                    <div class="row">
                        <div class="col-lg-10">
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <input class="form-control" type="text" name="datetimes"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                
                <table class="table table-striped table-bordered" id="bgp_updates">
                    <thead>
                        <th>ID</th>
                        <th>Prefix</th>
                        <th>Origin AS</th>
                        <th>AS Path</th>
                        <th>Peer AS</th>
                        <th>Service</th>
                        <th>Type</th>
                        <th>Timestamp</th>
                        <th>Hijack</th>
                        <th>Status</th>
                        <th>More</th>
                    </thead>
                </table>
                

            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                </hr>
                <p><i>Times are shown in your local time zone.</i></p>
            </div>
        </div>

        

    
{% endblock %}

{% block body %}
    {{super()}}
    {% block scripts %}
        {{super()}}
        <script>
            var table;
            var display_settings = { 'prefixes': null, 'time': null };
            var refresh_status = true;
            $('#custom_time').hide();

            $('#select_timewindow_all').on('click', function(event) {
                $('#custom_time').hide();
                $('#timewindow_buttons').children().each(function () { $(this).attr('class', 'btn btn-outline-secondary'); });
                $(this).attr('class', 'btn btn-outline-primary');
                display_settings['time'] = null;
                $('#bgp_updates').DataTable().destroy();
                render_table(display_settings);
            });
            
            $('#select_timewindow_1h').on('click', function(event) {
                $('#custom_time').hide();
                $('#timewindow_buttons').children().each(function () { $(this).attr('class', 'btn btn-outline-secondary'); });
                $(this).attr('class', 'btn btn-outline-primary');
                var now = Math.floor(Date.now() / 1000);
                var start_time = now - (3600 * 1);
                display_settings['time'] = { 'start_time': start_time, 'end_time': now};
                $('#bgp_updates').DataTable().destroy();
                render_table(display_settings);
            });

            $('#select_timewindow_24h').on('click', function(event) {
                $('#custom_time').hide();                
                $('#timewindow_buttons').children().each(function () { $(this).attr('class', 'btn btn-outline-secondary'); });
                $(this).attr('class', 'btn btn-outline-primary');
                var now = Math.floor(Date.now() / 1000);
                var start_time = now - (3600 * 24);
                display_settings['time'] = { 'start_time': start_time, 'end_time': now};
                $('#bgp_updates').DataTable().destroy()
                render_table(display_settings);
            });

            $('#select_timewindow_48h').on('click', function(event) {
                $('#custom_time').hide();                
                $('#timewindow_buttons').children().each(function () { $(this).attr('class', 'btn btn-outline-secondary'); });
                $(this).attr('class', 'btn btn-outline-primary');
                var now = Math.floor(Date.now() / 1000);
                var start_time = now - (3600 * 48);
                display_settings['time'] = { 'start_time': start_time, 'end_time': now};
                $('#bgp_updates').DataTable().destroy()
                render_table(display_settings);
            });

            $('#select_timewindow_other').on('click', function(event) {
                $('#timewindow_buttons').children().each(function () { $(this).attr('class', 'btn btn-outline-secondary'); });
                $(this).attr('class', 'btn btn-outline-primary');
                $('#custom_time').show();                
            });

            $("#prefixes_selection").change(function () {
                var option = this.value;
                if(option == "All"){
                    display_settings['prefixes'] = null;
                }else{
                    display_settings['prefixes'] = option;
                }
                $('#bgp_updates').DataTable().destroy()
                render_table(display_settings);
            });

            var columns = [
                { data: 'id' },
                { data: 'prefix' },
                { data: 'origin_as' },
                { data: 'as_path' },
                { data: 'peer_asn' },
                { data: 'service' },
                { data: 'type' },
                { data: 'timestamp' },
                { data: 'hijack_key' }];


            function render_table(settings){
                var parameters = {};

                if(settings['time'] != null && settings['prefixes'] == null){
                    parameters = { 'and': '(timestamp.gte.' + settings['time']['start_time'] + ',timestamp.lte.' + settings['time']['end_time'] + ')' }
                }else if(settings['time'] == null && settings['prefixes'] != null){
                    parameters = { 'and': '(matched_prefix.eq.' + settings['prefixes'] + ')' }
                }else if(settings['time'] != null && settings['prefixes'] != null){
                    parameters = { 'and': '(timestamp.gte.' + settings['time']['start_time'] + ',timestamp.lte.' + settings['time']['end_time'] + ',matched_prefix.eq.' + settings['prefixes'] + ')' }
                }


                table = $('#bgp_updates').DataTable( {
                    "processing": true,
                    "serverSide": true,
                    ajax: function(data, callback, settings) {
                        parameters['offset'] = data.start;
                        parameters['limit'] = data.length;
                        parameters['order'] =  columns[data.order[0].column].data + "." + data.order[0].dir;
                        $.ajax({
                            type: "GET",
                            url: 'http://localhost:3000/bgp_updates',
                            dataType: "json",
                            headers: { 'Prefer': 'count=exact' },
                            data: parameters,

                            success: function(data, status, xhr){
                                total_str = xhr.getResponseHeader("Content-Range").split('/')[1];
                                total = parseInt(total_str);
                                callback({
                                    recordsTotal: total,
                                    recordsFiltered: total,
                                    data: data
                                });
                            }
                        });
                    },
                    "columns": [
                        { data: 'id' },
                        { data: 'prefix' },
                        { data: 'origin_as' },
                        { data: 'as_path' },
                        { data: 'peer_asn' },
                        { data: 'service' },
                        { data: 'type' },
                        {   data: 'timestamp',
                            render: function(data, type, row){
                                var stillUtc = moment.unix(data).toDate();
                                return moment(stillUtc).local().format("MM-DD-YYYY HH:mm:ss");
                            } 
                        },
                        {   data: 'hijack_key',
                            render: function(data, type, row){
                                if('0' == data){
                                    return ''
                                }else{
                                    return '<a href="../hijack?id=' + data + '">View</a>'
                                }
                            } 
                        },
                        {   data: 'handled', 
                            render: function(data, type, row){
                                if(true == data){
                                    return '<img src="../../images/handled.png"/>'
                                }else{
                                    return '<img src="../../images/unhadled.png"/>'
                                }
                            } 
                        },
                        {
                            "className":      'details-control',
                            "orderable":      false,
                            "data":           null,
                            "defaultContent": ''
                        }
                    ],
                    "columnDefs": [ {
                        "targets": [8,9,10],
                        "orderable": false
                        } 
                    ],
                });
                $('#bgp_updates tbody').on('click', 'td.details-control', function () {
                    var tr = $(this).closest('tr');
                    var row = table.row(tr);
                    if (row.child.isShown()) {
                        row.child.hide();
                        refresh_status = true;
                        tr.removeClass('shown');
                    }else {
                        row.child( format(row.data()) ).show();
                        refresh_status = false;
                        tr.addClass('shown');
                    }
                });
            }
            


            setInterval( function () {
                if(refresh_status){
                    table.ajax.reload(null, false);
                }
            }, 5000 );
            
            
            $(document).ready(function(){
                render_table({})
                $('input[name="datetimes"]').daterangepicker({
                    timePicker: true,
                    startDate: moment().startOf('hour'),
                    endDate: moment().startOf('hour').add(32, 'hour'),
                    locale: {
                        format: 'M/DD hh:mm A'
                    }
                },  function(start, end, label) {
                    display_settings['time'] = { 'start_time': moment(start).unix(), 'end_time': moment(end).unix()};
                    console.log(display_settings)
                    $('#hijacks').DataTable().destroy()
                    render_table(display_settings);
                    }
                );
            });

            function format ( d ) {
                var stillUtc = moment.unix(d.timestamp).toDate();
                var timestamp = moment(stillUtc).local().format("MM-DD-YYYY HH:mm:ss");
                
                var orig_path = "";
                if (d.orig_path != null){
                    orig_path = d.orig_path;
                }

                var view_hijack_link = ""
                var hijack_key = ""
                if('0' != d.hijack_key){
                    hijack_key = d.hijack_key
                    view_hijack_link = '<a href="../hijack?id=' + d.hijack_key + '">View</a>'
                }

                var communities = new Array();
                (d.communities).forEach(function (item) {
                    communities.push({ 'asn': item[0], 'value': item[1] })
                })

                return '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">'+
                    '<tr>'+
                        '<td><b>Prefix:</b></td>'+
                        '<td>'+ d.prefix +'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Origin AS:</b></td>'+
                        '<td>'+d.origin_as+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>AS Path:</b></td>'+
                        '<td>'+d.as_path+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Peer AS:</b></td>'+
                        '<td>'+d.peer_asn+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Service:</b></td>'+
                        '<td>'+d.service+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Type:</b></td>'+
                        '<td>'+d.type+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Communities:</b></td>'+
                        '<td>'+JSON.stringify(communities)+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Timestamp:</b></td>'+
                        '<td>'+timestamp+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Original Path:</b></td>'+
                        '<td>'+orig_path+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Hijack Key:</b></td>'+
                        '<td>'+hijack_key+'</td>'+
                    '</tr>'+
                    '<tr>'+
                        '<td><b>Hijack:</b></td>'+
                        '<td>'+view_hijack_link+'</td>'+
                    '</tr>'+
                '</table>';
            }
        </script>
        <script src="{{ url_for('static', filename='datatable/jquery.dataTables.min.js') }}"></script>
        <script src="{{ url_for('static', filename='js/moment-with-locales.min.js') }}"></script>
        <script src="{{ url_for('static', filename='datatable/datetime-moment.js') }}"></script>
        <script src="{{ url_for('static', filename='datatable/dataTables.bootstrap4.min.js') }}"></script>
        <script src="{{ url_for('static', filename='js/daterangepicker.min.js') }}"></script>

    {% endblock %}
{% endblock %}
