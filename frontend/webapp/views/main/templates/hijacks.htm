{% extends "layout.htm" %}

{% block head %}
    {{super()}}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/index.css') }}">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.19/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/daterangepicker.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/switches.css') }}">
{% endblock %}

{% block page_content %}
    {{super()}}
        <div class="row">
            <div class="col-lg-12 page-header">
                <div class="row">
                    <div class="col-lg-6">
                        <h1>Hijacks</h1>
                    </div>
                    <div class="col-lg-2 offset-lg-2">
                        <h2>Live Update:</h2>
                    </div>
                    <div class="col-lg-2">
                        <label class="switch">
                            <input data-toggle="toggle" id="live_update_button" name="live_update_switch" type="checkbox" checked>
                            <span class="slider round"></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="row">
                    {% if prefixes %}
                    <div class="col-lg-1">
                        <p>Select prefix: </p>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            <select class="form-control" id="prefixes_selection">
                                <option>All</option>
                                {% for prefix in prefixes %}
                                    <option>{{ prefix }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                    <div class="col-lg-1 offset-lg-5">
                    {% else %}
                    <div class="col-lg-1 offset-lg-8">
                    {% endif %}
                        <p id="display_entries_time"> <b helpText="field_time_window_custom"> Timewindow: </b></p>
                    </div>
                    <div class="col-lg-3">
                        <div id="timewindow_buttons">
                            <button type="button" id="select_timewindow_all" class="btn btn-outline-primary">All</button>
                            <button type="button" id="select_timewindow_1h" class="btn btn-outline-secondary">1h</button>
                            <button type="button" id="select_timewindow_24h" class="btn btn-outline-secondary">24h</button>
                            <button type="button" id="select_timewindow_48h" class="btn btn-outline-secondary">48h</button>
                            <button type="button" id="select_timewindow_other" class="btn btn-outline-secondary">Custom</button>
                        </div>
                        <div id="custom_time" style="display: none;">
                            <div class="row">
                                <div class="col-lg-10">
                                    <div class="panel panel-default">
                                        <div class="panel-body">
                                            <input class="form-control" type="text" name="datetimes"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {% if current_user.has_roles('admin') %}
            <div class="col-lg-12">
                <div class="row">
                    <div class="col-lg-2 offset-lg-6">
                        <div class="btn-group-toggle" data-toggle="buttons">
                          <label class="btn btn-secondary active">
                            <input type="checkbox" checked autocomplete="off" disabled> Selected Hijacks <b id="selected_hijacks_num">0</b>
                          </label>
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            <select class="form-control" id="action_selection">
                                <option value="mark_resolved">Mark as Resolved</option>
                                <option value="mark_ignored">Mark as Ignored</option>
                                <option value="mark_seen">Mark as Seen</option>
                                <option value="mark_not_seen">Mark as Not Seen</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-lg-1">
                        <div class="row">
                            <div class="col-lg-6">
                                <button id="apply_selected" type="button" disabled class="btn btn-primary">Apply</button>
                            </div>
                            <div class="col-lg-6">
                                <button id="clear_all_selected" type="button" disabled class="btn btn-danger">Clear</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}
        </div>
        <div class="col-lg-12">
            <table class="table table-striped table-bordered" id="hijacks">
                <thead>
                    <th helpText="field_time_detected">Time Detected</th>
                    <th helpText="field_hijack_status">Status</th>
                    <th helpText="field_prefix">Prefix</th>
                    <th helpText="field_hijack_type">Type</th>
                    <th helpText="field_hijack_as">Hijack AS</th>
                    <th helpText="field_peers_seen"># Peers Seen</th>
                    <th helpText="field_ases_infected"># ASes Infected</th>
                    <th helpText="field_hijack_seen">Seen</th>
                    <th helpText="field_hijack_more">More</th>
                </thead>
                <tfoot>
                    <tr>
                        <th>Time Detected</th>
                        <th>Status</th>
                        <th>Prefix</th>
                        <th>Type</th>
                        <th>Hijack AS</th>
                        <th># Peers Seen</th>
                        <th># ASes Infected</th>
                        <th>Seen</th>
                        <th>More</th>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="row mt-3"">
            <div class="col-lg-6">
                </hr>
                <p> <i>
                    <a id="status_active_text" style="color:red" helpText="field_hijack_status_ongoing" href="javascript:filter_by_status('active');">Ongoing</a> /
                    <a id="status_resolved_text" style="color:green" helpText="field_hijack_status_resolved" href="javascript:filter_by_status('resolved');">Resolved</a> /
                    <a id="status_ignored_text" style="color:orange" helpText="field_hijack_status_ignored" href="javascript:filter_by_status('ignored');">Ignored</a> /
                    <a id="status_under_mitigation_text" style="color:blue" helpText="field_hijack_under_mitigation" href="javascript:filter_by_status('under_mitigation');">Under Mitigation</a> /
                    <a id="status_withdrawn_text" style="color:purple" helpText="field_hijack_status_withdrawn" href="javascript:filter_by_status('withdrawn');">Withdrawn</a> </i></p>
            </div>
            <div class="col-lg-6">
                </hr>
                <p class="float-right"><i>Times are shown in your local time zone <b id="timezone"></b>.</i></p>
            </div>
        </div>
    
{% endblock %}

{% block body %}
    {{super()}}
    {% block scripts %}
        {{super()}}
        <script>
            var table;
            var ws = null;
            var query = "";
            {% if current_user.has_roles('admin') %}
            var selected_hijacks = [];
            {% endif %}
            var static_urls = {
                "handled.png": "{{ url_for('static', filename='images/handled.png') }}",
                "unhadled.png": "{{ url_for('static', filename='images/unhadled.png') }}",
            };
            var hijack_redirect = "{{ url_for('main.display_hijack') }}";
            var refresh_state_live = true;
            var datatable_parameters = {
                    'order': [
                        {
                            'column': 0,
                            'dir': "desc"
                        }
                    ],
                    'offset': 0,
                    'limit': 0
                };
            var selected_status = null;
            // Columns that can be sorted
            var columns = [
                { data: 'time_detected' },
                null,
                { data: 'prefix' },
                { data: 'type' },
                { data: 'hijack_as' },
                { data: 'num_peers_seen' },
                { data: 'num_asns_inf' }
            ];

            var filter_parameters = {
                'prefixes_selection': null,
                'time': null,
                'prefix': null,
                'hijack_as': null,
                'type': null
            };

            var exlude_columns_from_search = ['Time Detected', 'Status', '# Peers Seen', '# ASes Infected', 'Seen', 'Mark', 'More'];

            var custom_message_for_search = {};

            var search_table_map = {
                2: "prefix",
                3: "type",
                4: "hijack_as"
            };

            var custom_time = [
                {
                    "id": "#select_timewindow_all",
                },
                {
                    "id": "#select_timewindow_1h",
                },
                {
                    "id": "#select_timewindow_24h",
                },
                {
                    "id": "#select_timewindow_48h",
                },
                {
                    "id": "#select_timewindow_other",
                },
            ];

            function display_time_selection(custom_time_data){
                for(item in custom_time_data){
                    $(custom_time_data[item]["id"]).on('click', function(event) {
                        $('#timewindow_buttons').children().each(function () { $(this).attr('class', 'btn btn-outline-secondary'); });
                        $(this).attr('class', 'btn btn-outline-primary');
                        if(event.target.id == 'select_timewindow_all'){
                            filter_parameters['time'] = null;
                        }else if(event.target.id == 'select_timewindow_other'){
                            if($('#custom_time').is(":visible")){
                                $('#custom_time').hide();
                            }else{
                                $('#custom_time').show();
                            }
                        }else{
                            var hours_back = 0;
                            if(event.target.id == 'select_timewindow_1h'){
                                hours_back = 1;
                            }else if(event.target.id == 'select_timewindow_24h'){
                                hours_back = 24;
                            }else if(event.target.id == 'select_timewindow_48h'){
                                hours_back = 48;
                            }
                            var start_date = new Date();
                            start_date.setHours(start_date.getHours() - hours_back);
                            var end_date = new Date();
                            filter_parameters['time'] = {
                                'start_time': start_date.toISOString(),
                                'end_time': end_date.toISOString()
                            };
                        }
                        construct_filter_hijacks_query();
                        table.draw();
                    });
                }
            }

            {% if prefixes %}
                $("#prefixes_selection").change(function () {
                    var option = this.value;
                    if(option == "All"){
                        filter_parameters['prefixes_selection'] = null;
                    }else{
                        filter_parameters['prefixes_selection'] = option;
                    }
                    construct_filter_hijacks_query();
                    table.draw();
                });
            {% endif %}

            function filter_by_status(status){
                // no status selected
                if(selected_status == status){
                    selected_status = status;
                    $("#status_" + status + "_text").css("font-weight", "");
                    filter_parameters['status'] = null;
                    selected_status = null;
                }else{
                    selected_status = status;
                    var status_list = ['active', 'resolved', 'ignored', 'under_mitigation', 'withdrawn'];
                    var filtered_status_list = status_list.filter(function(e) { return e !== status })
                    $("#status_" + status + "_text").css("font-weight", "bold")
                    filter_parameters['status'] = status;
                    for (status_ in filtered_status_list){
                        $("#status_" + filtered_status_list[status_] + "_text").css("font-weight", "");
                    }
                }
                construct_filter_hijacks_query();
                table.draw();
            }

            $('#hijacks tfoot th').each(function() {
                var title = $(this).text();
                if(!(exlude_columns_from_search.includes(title))){
                    if(title in custom_message_for_search){
                        var html_ = '<input class="form-control" id="input_' + title + '" type="text" placeholder="' + custom_message_for_search[title] + '" />';
                        html_ += '<div class="invalid-feedback"></div>';
                        $(this).html(html_);
                    }else{
                        var html_ = '<input class="form-control" id="input_' + title + '"s type="text" placeholder="' + title + '" />';
                        html_ += '<div class="invalid-feedback"></div>';
                        $(this).html(html_);
                    }
                }else{
                    $(this).html('');
                }
            });

            function inspect_input_of_search_boxes(){
                $("#hijacks tfoot tr th").each(function (index, item) {
                    if(index in search_table_map){
                        var value = $(this).children("input").val();
                        if(value == null || value == ''){
                            filter_parameters[search_table_map[index]] = null;
                            if($(this).children("input").hasClass("is-invalid")){
                                $(this).children("input").removeClass("is-invalid");
                                $(this).children("div").hide();
                            }

                        }else{
                            if(search_table_map[index] == 'prefix'){
                                var v4_regex_match = '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))(/[1][0-1])?$';
                                var v6_regex_match = '^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?$';
                                if(RegExp(v4_regex_match).test(value) || RegExp(v6_regex_match).test(value)){
                                    filter_parameters[search_table_map[index]] = value;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("form-control is-invalid").addClass("form-control");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").removeClass("form-control").addClass("form-control is-invalid");
                                    $(this).children("div").text('Not a valid v4/v6 prefix');
                                    $(this).children("div").show();   
                                }
                            }else if(search_table_map[index] == 'hijack_as'){
                                var number_reg = /^\s*(\d+)\s*$/;
                                var match = number_reg.exec(value);
                                var hijack_as = null;
                                if(match != null){
                                    hijack_as = parseInt(match[1]);
                                }else{
                                    hijack_as = -1;
                                }
                                if(0 < hijack_as && hijack_as < 4199999999){
                                    filter_parameters[search_table_map[index]] = hijack_as;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").addClass("is-invalid");
                                    $(this).children("div").text('Not an ASN');
                                    $(this).children("div").show();
                                }
                            }else if(search_table_map[index] == 'type'){
                                var type_regex = /^\s*(1|0|S|Q)\s*/;
                                var match = type_regex.exec(value);
                                var type = null;

                                if(match != null){
                                    type = match[1];
                                    filter_parameters[search_table_map[index]] = type;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").addClass("is-invalid");
                                    $(this).children("div").text('Not A or W');
                                    $(this).children("div").show();   
                                }
                            }else{
                                filter_parameters[search_table_map[index]] = value;
                            }
                        }
                    }
                });
            }

            function construct_filter_hijacks_query(){
                var filters = [];
                inspect_input_of_search_boxes();

                {% if hijack_keys %}
                    var keys = {{ hijack_keys | safe }};
                    var keys_str = "";
                    for(key in keys){
                        keys_str += '"' + keys[key] + '",' ;
                    }
                    filters.push('{ key: {_in: [' + keys_str + ']} }');
                {% endif %}

                if(filter_parameters['time'] != null){
                    filters.push('{ time_detected: {_gte: "' + filter_parameters['time']['start_time'] + '"} }');
                    filters.push('{ time_detected: {_lte: "' + filter_parameters['time']['end_time'] + '"} }');
                }

                if(filter_parameters['prefixes_selection'] != null){
                    filters.push('{ configured_prefix: {_eq: "' + filter_parameters['prefixes_selection'] + '"} }');
                }

                if(filter_parameters['prefix'] != null){
                    filters.push('{ prefix: {_eq: "' + filter_parameters['prefix'] + '"} }');
                }

                if(filter_parameters['hijack_as'] != null){
                    filters.push('{ hijack_as: {_eq: "' + filter_parameters['hijack_as'] + '"} }');
                }

                if(filter_parameters['type'] != null){
                    filters.push('{ type: {_eq: "' + filter_parameters['type'] + '"} }');
                }

                if(filter_parameters['status'] != null){
                    filters.push('{' + filter_parameters['status'] + ': {_eq: true } }');
                }


                if(filters.length > 0){
                    datatable_parameters['and'] = 'where: { _and: [' + filters.join() + '] }';
                }else{
                    datatable_parameters['and'] = null;
                }
            }


            function render_table(ws){
               construct_filter_hijacks_query();

                table = $('#hijacks').DataTable( {
                    "processing": false,
                    "serverSide": true,
                    "searching": false,
                    "pagingType": "full_numbers",
                    "ajax": (data, callback, settings) => {
                        var sort;
                        if(data.order[0].dir == 'desc'){
                            sort = 'desc_nulls_first';
                        }else{
                            sort = 'asc';
                        }
                        datatable_parameters['offset'] = data.start;
                        datatable_parameters['limit'] = data.length;
                        query = "{ datatable: view_hijacks_aggregate"
                        if(datatable_parameters['and'] != null){
                            query += "(" + datatable_parameters['and'] + ") { aggregate { totalCount: count } }";
                        }else{
                            query += " { aggregate { totalCount: count } }";
                        }
                        query += " view_data: view_hijacks(limit: " + datatable_parameters['limit'] + ", offset: " + datatable_parameters['offset'] 
                        query += ", order_by: {" + columns[data.order[0].column].data + ": " + sort + "} "
                        if(datatable_parameters['and'] != null){
                            query += datatable_parameters['and'] +  ")";
                        }else{
                            query += ")";
                        }
                        query += " { time_detected prefix type hijack_as num_peers_seen num_asns_inf key seen withdrawn resolved ignored active under_mitigation } }"
                        if(refresh_state_live){
                            fetchDatatableLive(ws, callback, query);
                        }else{
                            fetchDatatable(callback, query);
                        }
                    },
                    initComplete: function() {
                        var api = this.api();
                        api.columns().every(function() {
                            var that = this;
                            var column_index = that[0][0]
                            $('input', this.footer()).on('keydown', function(ev) {
                                if (ev.keyCode == 13) { //only on enter keypress (code 13)
                                    construct_filter_hijacks_query();
                                    that.draw()
                                }
                            });
                        });
                    },
                    "order": [[ 0, "desc" ]],
                    "columns": [
                        { data: 'time_detected', "width": "150px" },
                        { data: 'status' },
                        { data: 'prefix' },
                        { data: 'type', "width": "68px" },
                        { data: 'hijack_as' },
                        { data: 'num_peers_seen' },
                        { data: 'num_asns_inf' },
                        { data: 'seen', "width": "14px" },
                        { data: 'hijack_link', "width": "14px" }
                    ],
                    {% if current_user.has_roles('admin') %}
                    "fnRowCallback": function (nRow, aData, iDisplayIndex) {
                        $(nRow).attr('id', aData['key']);
                        if(selected_hijacks.indexOf(aData['key']) > -1){
                            $(nRow).addClass('selected');
                        }
                    },
                    {% endif %}
                    "columnDefs": [
                        {
                            "targets": [1,2,3,4,5,6,7,8],
                            "orderable": false
                        },
                        {
                            "targets": [3,5,6,7],
                            "className": "text-center",
                        }
                    ],
                    "language": {
                        "emptyTable": "<img src=\"{{ url_for('static', filename='images/checkmark.png') }}\" ></img></br><h3>No hijack alerts. Go grab a beer!</h3></br>"
                    }
                });
            }

            $(document).ready(function(){
                display_time_selection(custom_time);

                ws = new WebSocket('wss://' + window.location.hostname + '/api/graphql', 'graphql-ws');
                ws.addEventListener('open', (event) => {
                    fetch("/jwt/auth", {
                        method: "GET",
                    })
                    .then(response => response.json())
                    .then(data => ws.send(JSON.stringify({
                        type:"connection_init",
                        payload:{
                            headers:{
                                "Content-Type":"application/json",
                                "Authorization":"Bearer " + data['access_token']
                            }
                        }
                    })))
                    .catch(error => console.error(error));
                });
                ws.addEventListener('message', function conn_ack(event) {
                    data = JSON.parse(event.data);
                    if(data.type === 'connection_ack') {
                        ws.removeEventListener('message', conn_ack);
                        render_table(ws);
                        $('#hijacks tbody').on( 'click', 'tr', function () {
                            if($(this).hasClass ("selected")) {
                                selected_hijacks.splice(selected_hijacks.indexOf($(this).attr("id")), 1);
                            }else{
                                selected_hijacks.push($(this).attr("id"));
                            }
                            $('#selected_hijacks_num').html(selected_hijacks.length);

                            if(selected_hijacks.length > 0){
                                $('#apply_selected').prop('disabled', false);
                                $('#clear_all_selected').prop('disabled', false);
                            }else{
                                $('#clear_all_selected').prop('disabled', true);
                                $('#apply_selected').prop('disabled', true);
                            }
                            $(this).toggleClass('selected');
                        } );
                        $('#hijacks').on( 'draw.dt', function () {
                            asn_map_to_name();
                        });
                        displayHelpTextTable();
                    }
                });

                $('input[name="datetimes"]').daterangepicker({
                    timePicker: true,
                    startDate: moment().startOf('hour'),
                    endDate: moment().startOf('hour').add(32, 'hour'),
                    locale: {
                        format: 'M/DD hh:mm A'
                    }
                },  function(start, end, label) {
                    filter_parameters['time'] = { 'start_time': start.toISOString(), 'end_time': end.toISOString()};
                    construct_filter_hijacks_query();
                    table.draw();
                    }
                );
                {% if current_user.has_roles('admin') %}

                $('#clear_all_selected').click(function() {
                    selected_hijacks = [];
                    $('#selected_hijacks_num').html(selected_hijacks.length);
                    table.draw(false);
                    $('#clear_all_selected').prop('disabled', true);
                    $('#apply_selected').prop('disabled', true);
                } );
                {% endif %}

                $('#timezone').html(display_timezone());
                displayHelpHijackStatus();
                displayHelpTextB();
            });
            {% if current_user.has_roles('admin') %}
            $('#apply_selected').click(function() {
                $.ajax({
                    type: 'POST',
                    url: "{{ url_for('actions.submit_hijacks_actions') }}",
                    data: {
                        "hijack_keys" : JSON.stringify(selected_hijacks),
                        "action": $("#action_selection option:selected").val()
                    },
                    success: function(result){
                        table.draw(false);
                    },
                    dataType: 'json'
                });
                selected_hijacks = [];
                $('#selected_hijacks_num').html(selected_hijacks.length);
                table.draw(false);
                $('#clear_all_selected').prop('disabled', true);
                $('#apply_selected').prop('disabled', true);

            } );
            {% endif %}

            $("#live_update_button").on('change', function() {
                if ($(this).is(':checked')) {
                    refresh_state_live = true;
                    startDatatableLive(ws, query);
                }else {
                    stopDatatableLive(ws);
                    refresh_state_live = false;
                }
            });


        </script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
        <script src="{{ url_for('static', filename='js/custom/graphql.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='datatable/jquery.dataTables.min.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='js/custom/utils.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='js/moment-with-locales.min.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='datatable/datetime-moment.js') }}{{ js_version }}"></script>
        <script src="https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap4.min.js"></script>
        <script src="{{ url_for('static', filename='js/daterangepicker.min.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='js/custom/display_info.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='js/custom/ripestat.js') }}{{ js_version }}"></script>
    {% endblock %}
{% endblock %}
