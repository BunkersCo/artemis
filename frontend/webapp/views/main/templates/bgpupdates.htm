{% extends "layout.htm" %}

{% block head %}
    {{super()}}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/index.css') }}">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.19/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/daterangepicker.css') }}">
{% endblock %}

{% block page_content %}
    {{super()}}
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">BGP Updates</h1>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="row">
                    <div class="col-lg-1">
                        <p>Select prefix: </p>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            <select class="form-control" id="prefixes_selection">
                                <option>All</option>
                                {% for prefix in prefixes %}
                                    <option>{{ prefix }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                    <div class="col-lg-1 offset-lg-4">
                        <p id="display_entries_time"> Timewindow: </p>
                    </div>
                    <div class="col-lg-3">
                        <div id="timewindow_buttons">
                            <button type="button" id="select_timewindow_all" class="btn btn-outline-primary">All</button>
                            <button type="button" id="select_timewindow_1h" class="btn btn-outline-secondary">1h</button>
                            <button type="button" id="select_timewindow_24h" class="btn btn-outline-secondary">24h</button>
                            <button type="button" id="select_timewindow_48h" class="btn btn-outline-secondary">48h</button>
                            <button type="button" id="select_timewindow_other" class="btn btn-outline-secondary">Custom</button>
                        </div>
                        <div id="custom_time" style="display: none;">
                            <div class="row">
                                <div class="col-lg-10">
                                    <div class="panel panel-default">
                                        <div class="panel-body">
                                            <input class="form-control" type="text" name="datetimes"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                
                <table class="table table-striped table-bordered" id="bgp_updates">
                    <thead>
                        <th>Timestamp</th>
                        <th>Prefix</th>
                        <th>Origin AS</th>
                        <th>AS Path</th>
                        <th>Peer AS</th>
                        <th>Service</th>
                        <th>Type</th>
                        <th>Hijack</th>
                        <th>Status</th>
                        <th>More</th>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Timestamp</th>
                            <th>Prefix</th>
                            <th>Origin AS</th>
                            <th>AS Path</th>
                            <th>Peer AS</th>
                            <th>Service</th>
                            <th>Type</th>
                            <th>Hijack</th>
                            <th>Status</th>
                            <th>More</th>
                        </tr>
                    </tfoot>
                </table>
                

            </div>
        </div>
        <div class="row mt-3">
            <div class="col-lg-6">
                    <p>Last refresh:
                        <b id="last_refresh_time"></b> 
                        <b id="refresh_button">
                            <a href="javascript:refresh_handle('disable');">(Disable Autorefresh)</a>
                        </b>
                    </p>
            </div>
            <div class="col-lg-6">
                </hr>
                <p class="float-right"><i>Times are shown in your local time zone <b id="timezone"></b>.</i></p>
            </div>
        </div>


    
{% endblock %}

{% block body %}
    {{super()}}
    {% block scripts %}
        {{super()}}
        <script>
            var table;
            var static_urls = {
                "handled.png": "{{ url_for('static', filename='images/handled.png') }}",
                "unhadled.png": "{{ url_for('static', filename='images/unhadled.png') }}",
            };
            var hijack_redirect = "{{ url_for('main.display_hijack') }}";
            var refresh_status = true;
            var datatable_parameters = {
                    'order': [
                        {
                            'column': 0,
                            'dir': "desc"
                        }
                    ],
                    'offset': 0,
                    'limit': 0
                };
            var fields_to_display = [
                ['prefix', 'Prefix'],
                ['origin_as', 'Origin AS'],
                ['as_path', 'AS Path'],
                ['orig_path', 'Original Path'],
                ['peer_asn', 'Peer AS'],
                ['service', 'Service'],
                ['type', 'Type'],
                ['communities', 'Communities'],
                ['timestamp', 'Timestamp'],
                ['hijack_key', 'Hijack_key'],
                ['matched_prefix', 'Matched Prefix'],
                ['hijack_link', 'View Hijack'],
                ['handled', 'Handled']
            ];

            // Columns that can be sorted
            var columns = [
                { data: 'timestamp' },
                { data: 'prefix' },
                { data: 'origin_as' },
                { data: 'as_path' },
                { data: 'peer_asn' },
                { data: 'service' },
                { data: 'type' }
            ];

            var filter_parameters = {
                'prefixes_selection': null,
                'time': null,
                'prefix': null,
                'origin_as': null,
                'peer_asn': null,
                'service': null,
                'type': null
            };

            var exlude_columns_from_search = ['Timestamp', 'Hijack', 'Status', 'More'];
            var custom_message_for_search = {
                "Type": "A|W"
            };

            var search_table_map = {
                1: "prefix",
                2: "origin_as",
                3: "as_path",
                4: "peer_asn",
                5: "service",
                6: "type"
            };

            var custom_time = [
                {
                    "id": "#select_timewindow_all",
                },
                {
                    "id": "#select_timewindow_1h",
                },
                {
                    "id": "#select_timewindow_24h",
                },
                {
                    "id": "#select_timewindow_48h",
                },
                {
                    "id": "#select_timewindow_other",
                },
            ];

            function display_time_selection(custom_time_data){
                for(item in custom_time_data){
                    $(custom_time_data[item]["id"]).on('click', function(event) {
                        $('#timewindow_buttons').children().each(function () { $(this).attr('class', 'btn btn-outline-secondary'); });
                        $(this).attr('class', 'btn btn-outline-primary');
                        if(event.target.id == 'select_timewindow_all'){
                            filter_parameters['time'] = null;
                        }else if(event.target.id == 'select_timewindow_other'){
                            if($('#custom_time').is(":visible")){
                                $('#custom_time').hide();
                            }else{
                                $('#custom_time').show();
                            }
                        }else{
                            var hours_back = 0;
                            if(event.target.id == 'select_timewindow_1h'){
                                hours_back = 1;
                            }else if(event.target.id == 'select_timewindow_24h'){
                                hours_back = 24;
                            }else if(event.target.id == 'select_timewindow_48h'){
                                hours_back = 48;
                            }
                            var start_date = new Date();
                            start_date.setHours(start_date.getHours() - hours_back);
                            var end_date = new Date();
                            filter_parameters['time'] = {
                                'start_time': start_date.toISOString(),
                                'end_time': end_date.toISOString()
                            };
                        }
                        construct_filter_bgp_update_query();
                        table.draw();
                    });
                }
            }

            $("#prefixes_selection").change(function () {
                var option = this.value;
                if(option == "All"){
                    filter_parameters['prefixes_selection'] = null;
                }else{
                    filter_parameters['prefixes_selection'] = option;
                }
                construct_filter_bgp_update_query();
                table.draw();
            });

            $('#bgp_updates tfoot th').each(function() {
                var title = $(this).text();
                if(!(exlude_columns_from_search.includes(title))){
                    if(title in custom_message_for_search){
                        $(this).html('<input class="form-control" type="text" placeholder="' + custom_message_for_search[title] + '" />');
                    }else{
                        $(this).html('<input class="form-control" type="text" placeholder="' + title + '" />');
                    }
                }else{
                    $(this).html('');
                }
            });

            function inspect_input_of_search_boxes(){
                $("#bgp_updates tfoot tr th").each(function (index, item) {
                    if(index in search_table_map){
                        if($(this).children("input").val() == null || $(this).children("input").val() == ''){
                            filter_parameters[search_table_map[index]] = null;
                        }else{
                            filter_parameters[search_table_map[index]] = $(this).children("input").val();
                        }
                    }
                });
            }

            function construct_filter_bgp_update_query(){
                var filters = [];
                inspect_input_of_search_boxes();

                if(filter_parameters['time'] != null){
                    filters.push('timestamp.gte.' + filter_parameters['time']['start_time'] + ',timestamp.lte.' + filter_parameters['time']['end_time']);
                }

                if(filter_parameters['prefixes_selection'] != null){
                    filters.push('matched_prefix.eq.' + filter_parameters['prefixes_selection']);
                }

                if(filter_parameters['prefix'] != null){
                    filters.push('prefix.eq.' + filter_parameters['prefix']);
                }

                if(filter_parameters['origin_as'] != null){
                    filters.push('origin_as.eq.' + filter_parameters['origin_as']);
                }

                if(filter_parameters['as_path'] != null){
                    filters.push('as_path.cs.{' + filter_parameters['as_path'] + "}");
                }

                if(filter_parameters['peer_asn'] != null){
                    filters.push('peer_asn.eq.' + filter_parameters['peer_asn']);
                }

                if(filter_parameters['service'] != null){
                    filters.push('service.like.*' + filter_parameters['service'] + '*');
                }

                if(filter_parameters['type'] != null){
                    filters.push('type.eq.' + filter_parameters['type']);
                }

                if(filters.length > 0){
                    datatable_parameters['and'] = '(' + filters.join() + ')';
                }else{
                    delete datatable_parameters['and'];
                }
            }

            function render_table(){
                construct_filter_bgp_update_query();

                table = $('#bgp_updates').DataTable( {
                    "processing": false,
                    "serverSide": true,
                    "searching": false,
                    ajax: function(data, callback, settings) {
                        datatable_parameters['offset'] = data.start;
                        datatable_parameters['limit'] = data.length;
                        datatable_parameters['order'] =  columns[data.order[0].column].data + "." + data.order[0].dir;
                        $.ajax({
                            type: "POST",
                            url: '{{ url_for('proxy_api') }}',
                            dataType: "json",
                            data: { "action": "view_bgpupdates", "parameters" : JSON.stringify(datatable_parameters) },
                            success: function(data, status, xhr){
                                callback({
                                    recordsTotal: data.total,
                                    recordsFiltered: data.total,
                                    data: format_bgp_updates_datatable(data.results)
                                });
                            }
                        });
                    },
                    initComplete: function() {
                        var api = this.api();
                        api.columns().every(function() {
                            var that = this;
                            var column_index = that[0][0]
                            $('input', this.footer()).on('keydown', function(ev) {
                                if (ev.keyCode == 13) { //only on enter keypress (code 13)
                                    construct_filter_bgp_update_query();
                                    that.draw()
                                }
                            });
                        });
                    },
                    "order": [[ 0, "desc" ]],
                    "columns": [
                        { data: 'timestamp', "width": "150px"},
                        { data: 'prefix' },
                        { data: 'origin_as', "width": "80px" },
                        { data: 'as_path' },
                        { data: 'peer_asn', "width": "80px" },
                        { data: 'service' },
                        { data: 'type', "width": "14px" },
                        { data: 'hijack_link', "width": "14px" },
                        { data: 'handled', "width": "14px" },
                        {
                            "className":      'details-control',
                            "orderable":      false,
                            "data":           null,
                            "defaultContent": '',
                            "width": "14px"
                        }
                    ],
                    "columnDefs": [
                        {
                            "targets": [7,8,9],
                            "orderable": false,
                        },
                        {
                            "targets": [6,7,8,9],
                            "className": "text-center",
                        }
                    ],
                    "language": {
                        "emptyTable": "<h3>No BGP Updates to display</h3>"
                    }
                });
            }

            $(document).ready(function(){
                display_time_selection(custom_time);
                $('#last_refresh_time').html(transform_date_to_local($.now()));
                render_table({});
                $('input[name="datetimes"]').daterangepicker({
                    timePicker: true,
                    startDate: moment().startOf('hour'),
                    endDate: moment().startOf('hour').add(32, 'hour'),
                    locale: {
                        format: 'M/DD hh:mm A'
                    }
                },  function(start, end, label) {
                    filter_parameters['time'] = { 'start_time': start.toISOString(), 'end_time': end.toISOString()};
                    construct_filter_bgp_update_query();
                    table.draw();
                    }
                );

                $('#bgp_updates tbody').on('click', 'td.details-control', function () {
                    var tr = $(this).closest('tr');
                    var row = table.row(tr);
                    if (row.child.isShown()) {
                        row.child.hide();
                        refresh_status = true;
                        tr.removeClass('shown');
                    }else {
                        row.child( format(row.data()) ).show();
                        refresh_status = false;
                        tr.addClass('shown');
                    }
                });

                setInterval( function () {
                if(refresh_status){
                        table.draw(false);
                        $('#last_refresh_time').html(transform_date_to_local($.now()));
                    }
                }, 5000 );

                $('#timezone').html(display_timezone());
            });

            function format ( d ) {
                var html_ = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">';
                for(item in fields_to_display){
                    html_ += '<tr><td><b>' + fields_to_display[item][1] + ':</b></td>'
                    html_ += '<td>' + d[fields_to_display[item][0]] + '</td></tr>'
                }
                html_ += '</table>'
                return html_;
            }

            function refresh_handle(state){
                if(state == 'disable'){
                    refresh_status = false;
                    $("#refresh_button").html('<a href="javascript:refresh_handle(\'enable\');">(Enable Autorefresh)</a>');
                }else{
                    refresh_status = true;
                    $("#refresh_button").html('<a href="javascript:refresh_handle(\'disable\');">(Disable Autorefresh)</a>');
                }
            }

        </script>

        <script src="{{ url_for('static', filename='datatable/jquery.dataTables.min.js') }}"></script>
        <script src="{{ url_for('static', filename='js/custom/utils.js') }}"></script>
        <script src="{{ url_for('static', filename='js/moment-with-locales.min.js') }}"></script>
        <script src="{{ url_for('static', filename='datatable/datetime-moment.js') }}"></script>
        <script src="https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap4.min.js"></script>
        <script src="{{ url_for('static', filename='js/daterangepicker.min.js') }}"></script>


    {% endblock %}
{% endblock %}
