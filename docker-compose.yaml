version: '3'
services:
    backend:
        build: ./backend/
        container_name: backend
        depends_on:
            - rabbitmq
            - postgres
        networks:
            - artemis
        expose:
            - ${SUPERVISOR_PORT}
        environment:
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            POSTGRES_HOST: ${POSTGRES_HOST}
            DATABASE_NAME: ${DB_NAME}
            DATABASE_USER: ${DB_USER}
            DATABASE_HOST: ${POSTGRES_HOST}
            DATABASE_PASSWORD: ${DB_PASS}
            SUPERVISOR_HOST: ${SUPERVISOR_HOST}
            SUPERVISOR_PORT: ${SUPERVISOR_PORT}
        volumes:
            - ./backend/configs/:/etc/artemis/
            - ./backend/:/root/
            - ./backend/supervisor.d/:/etc/supervisor/conf.d/
            # - ./backend/other/conf_parser.sh:/etc/cron.hourly/parser
    frontend:
        build: ./frontend/
        container_name: frontend
        depends_on:
            - rabbitmq
            - postgres
            - postgrest
            - backend
        networks:
            - artemis
        expose:
            - 8000
        environment:
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            POSTGRES_HOST: ${POSTGRES_HOST}
            SYSTEM_VERSION: ${SYSTEM_VERSION}
            MACHINE_IP: ${MACHINE_IP}
            USER_ROOT_USERNAME: ${ADMIN_USER}
            USER_ROOT_PASSWORD: ${ADMIN_PASS}
            USER_ROOT_EMAIL: ${ADMIN_EMAIL}
            POSTGREST_FLASK_HOST: ${POSTGREST_HOST}:${POSTGREST_PORT}
            SUPERVISOR_HOST: ${SUPERVISOR_HOST}
            SUPERVISOR_PORT: ${SUPERVISOR_PORT}
            # SYSLOG_HOST: 'syslog:514'
        volumes:
            - ./frontend/:/root/
            - ./frontend/webapp/configs/:/etc/artemis/
            - ./frontend/db/:/etc/webapp/db/
    nginx:
        image: nginx:latest
        container_name: production_nginx
        restart: always
        depends_on:
            - frontend
            - postgrest
        networks:
            - artemis
        expose:
            - 80
            - 443
        ports:
            - "80:80"
            - "443:443"
        environment:
            ARTEMIS_FRONTEND_HOST: ${WEBAPP_HOST}
            POSTGREST_HOST: ${POSTGREST_HOST}
        volumes:
            - ./frontend/webapp/configs/nginx.conf:/etc/nginx/nginx.conf
            - ./frontend/webapp/configs/certs/:/etc/nginx/certs/
    rabbitmq:
        image: rabbitmq:3.7.8-management-alpine
        container_name: rabbitmq
        restart: always
        networks:
            - artemis
        expose:
            - 5671
            - 5672
            - 15672
        ports:
            - "15672:15672"
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    postgres:
        image: timescale/timescaledb:latest-pg10
        container_name: postgres
        restart: always
        networks:
            - artemis
        expose:
            - 5432
        environment:
            POSTGRES_DB: ${DB_NAME}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASS}
        volumes:
            - ./postgres-data-current:/var/lib/postgresql/data
            - ./other/postgres-backup.sh:/etc/periodic/daily/backup
            - ./postgres-data-backup/:/tmp/
            - ./other/db/init.sql:/docker-entrypoint-initdb.d/zinit.sql
            - ./other/db/data/:/docker-entrypoint-initdb.d/data/
            - ./other/db/libs/:/docker-entrypoint-initdb.d/libs/
    postgrest:
        image: postgrest/postgrest
        container_name: postgrest
        restart: always
        depends_on:
            - postgres
            - backend
        networks:
            - artemis
        expose:
            - 3000
        environment:
            PGRST_DB_URI: postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
            PGRST_DB_SCHEMA: ${DB_SCHEMA}
            PGRST_DB_ANON_ROLE: ${DB_USER}
    pg_amqp_bridge:
        image: subzerocloud/pg-amqp-bridge
        container_name: pg_amqp_bridge
        depends_on:
            - postgres
            - backend
        networks:
            - artemis
        environment:
        - RUST_LOG=info # output forwarded messages
        - POSTGRESQL_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
        - AMQP_URI=amqp://${RABBITMQ_HOST}//
        - BRIDGE_CHANNELS=events:amq.direct


networks:
    artemis:
